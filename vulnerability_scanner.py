pip install requests beautifulsoup4

import requests
from bs4 import BeautifulSoup

# SQL Injection Test Function
def test_sql_injection(url):
    payloads = ["' OR '1'='1", "' OR '1'='1' --", "' OR '1'='1' /*"]
    for payload in payloads:
        test_url = f"{url}?id={payload}"
        response = requests.get(test_url)
        if "error" not in response.text.lower():
            print(f"Potential SQL Injection vulnerability found with payload: {payload}")
        else:
            print(f"No vulnerability found with payload: {payload}")

# XSS Test Function
def test_xss(url):
    payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]
    for payload in payloads:
        test_url = f"{url}?q={payload}"
        response = requests.get(test_url)
        if payload in response.text:
            print(f"Potential XSS vulnerability found with payload: {payload}")
        else:
            print(f"No vulnerability found with payload: {payload}")

# CSRF Test Function
def test_csrf(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')
    for form in forms:
        if not form.find('input', {'name': 'csrf_token'}):
            print(f"Potential CSRF vulnerability found in form: {form}")
        else:
            print("No CSRF vulnerability found.")

# Main Function to Run the Scanner
if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    print("Testing for SQL Injection...")
    test_sql_injection(target_url)
    print("Testing for XSS...")
    test_xss(target_url)
    print("Testing for CSRF...")
    test_csrf(target_url)
